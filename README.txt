A Brief Introduction to CanvasBrenda PraggastisThe canvas element in HTML5 creates a block in an HTML page where JavaScript may create and manipulate bitmap graphics.  Some excellent examples of the use of the canvas element may be found  here:http://code.tutsplus.com/articles/21-ridiculously-impressive-html5-canvas-experiments--net-14210http://davidwalsh.name/canvas-demosFor my Christmas Holiday Project I followed a tutorial from the phpacademy on youtube:https://www.youtube.com/watch?v=m4sioSqlXhQ  to create a drawing canvas which I turned into a drawing app using rails. (https://bp-draw.herokuapp.com/)   The code for the project may be found in: https://github.com/bpraggastis/bp-draw-ada-holiday-projectIn this talk I will outline the steps to begin using canvas by working through some examples.Example 1:On the HTML page we place the canvas element along with alternate text on the page. This creates a space. 	<canvas id=’paper’>Alternate Text</canvas>The canvas has two sets of dimensions: one for the drawing and one for the element. The default size is 150x300px. The element dimensions size the canvas with respect to the HTML page.The drawing dimensions indicate the coordinate grid of the canvas for all of the references in JavaScript.Both sets of dimensions may be set by adding width= and height=  attributes to the canvas element. If you set them differently you must watch that you don’t distort the graphics. In general note that the CSS attributes associated with the canvas  element should be minimal as it can interfere with the drawing. All of the graphics and manipulation of graphics will be handled by JavaScript.* JavaScript interacts with the canvas through its context:      canvas = document.getElementById(‘paper’);      context = canvas.getContext(‘2d’);The context has methods which will build graphics:* Example-Arc:       context.arc(x, y, radius, arcstartangle, arcstopangle, counterclockwise=false);* Example-Rectangle:      context.rect(x, y, dx, dy);* To see the object:      context.fillStyle() = ‘green’;  //default color is black      context.fill();      context.strokeStyle() = ‘blue’;      context.stroke();* To separate objects start the series of commands for each object with:      context.beginPath();* To add an image to the context first place it in an img tag with no display:none in the HTML document. Then use JavaScript to get the element by its id:image = context.document.getElementById(‘cat’);context.drawImage(image, topleft-x, topleft-y); //there are additional arguments for capturing part of an image and resizing.Example2: Once we know what to draw we can choose to draw by attaching it to an event. We attach an event listener to the canvas element then respond with a method which adds graphics to the canvas.Example3:We can connect dots as is illustrated in this example. Note the position of the context.beginPath() commands. This starts a new path every time a dot or a line segment is drawn.Example4:We may have multiple canvases and contexts on the same page. Example5:We may set the canvas to take up the entire page.Example6:We may animate our drawing by creating a draw handler, which repeats after so many micro-seconds.